#!/bin/bash

# This checks to see whether dependencies which are often not present are installed.
# If ppoll() is missing a work-around is enabled in makefile.local.

CXX=g++
CXXFLAGS=
CPPFLAGS=
LDFLAGS=
LOADLIBES=
LDLIBS=

ENVVARS=()

OPTIONS=(
	"--prefix=PREFIX/PREFIX/install architecture-independent files in PREFIX"
	"--exec-prefix=EPREFIX/EPREFIX/install architecture-dependent files in EPREFIX"
	"--bindir=DIR/INSTALL_BINDIR/user executables"
	"--datarootdir=DIR/DATAROOTDIR/read-only architecture-independent data root"
	"--mandir=DIR/INSTALL_MANDIR/man documentation"
)

function do_option() {
	for opt in "${OPTIONS[@]}"; do
		if [ "${opt%%=*}" == "$1" ]; then
			l="${opt#*/}"
			ENVVARS+=("${l%/*}=$2")
			return
		fi
	done
	echo "Warning: Unknown option: $1=$2"
}

function do_var() {
	ENVVARS+=("$1")
	eval "$1"
}

function show_help() {
	echo "Usage: ./configure [OPTION]... [VAR=VALUE]..."
	echo "To assign makefile variables, specify them as VAR=VALUE"
	echo "Notable makefile variables include:"
	echo "	CXX                           Path to C++ compiler"
	echo "	LD                            Path to ld"
	echo "	OBJCOPY                       Path to objcopy"
	echo "	CXXFLAGS                      C++ compiler flags"
	echo "	CPPFLAGS                      C/C++ preprocessor flags"
	echo " 	LDFLAGS                       Linker flags"
	echo "	LDLIBS                        Libraries to pass to the linker"
	echo "Options to control installation directories:"
	for opt in "${OPTIONS[@]}"; do
		optname="${opt#*/}"
		optname="${optname%/*}"
		printf '\t%-30s%s [%s]\n' "${opt%%/*}" "${opt##*/}" "`sed -e "s/^$optname[[:space:]]*=[[:space:]]*\(.*\)$/\1/; t; d;" makefile`"
	done
}

while [ "$#" -gt 0 ]; do
	case "$1" in
		--help)
			show_help
			exit 0
			;;
		--*=*)
			do_option "${1%%=*}" "${1#*=}"
			shift
			;;
		--*)
			echo "Warning: Unknown option: $1"
			shift
			;;
		*=*)
			do_var "$1"
			shift
			;;
		*)
			echo "Warning: Unknown option: $1"
			shift
			;;
	esac
done

CXXFLAGS+="-std=c++11"

APT_PKGS=()
RETCODE=0

exec 3> "`dirname "$0"`/makefile.local"

echo "# Automatically generated by configure at `date "+%F %T %z"`" >&3

for i in "${ENVVARS[@]}"; do
	echo "$i" >&3
done

${CXX} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -o /dev/null -x c++ - -lb64 ${LOADLIBES} ${LDLIBS} 2> /dev/null << EOL
#include <b64/encode.h>
#include <b64/decode.h>

int main() {
	base64::encoder b64e;
	base64::decoder b64d;
	return 0;
}
EOL

if [ $? -ne 0 ]; then
	echo "Error: libb64 is missing"
	APT_PKGS+=("libb64-dev")
	RETCODE=1
fi

${CXX} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -o /dev/null -x c++ - -lmhash ${LOADLIBES} ${LDLIBS} 2> /dev/null << EOL
#include <mhash.h>

int main() {
	mhash_init(MHASH_MD5);
	return 0;
}
EOL

if [ $? -ne 0 ]; then
	echo "Error: mhash is missing"
	APT_PKGS+=("libmhash-dev")
	RETCODE=1
fi

${CXX} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} -o /dev/null -x c++ - ${LOADLIBES} ${LDLIBS} 2> /dev/null << EOL
#include <poll.h>

int main() {
	return ppoll(0, 0, 0, 0);
}
EOL

if [ $? -ne 0 ]; then
	echo "Info: ppoll() is missing, enabling work-around"
	echo "CPPFLAGS += -DPPOLL_MISSING" >&3
fi

if [ ${#APT_PKGS[@]} -ne 0 ] && which "apt-get" > /dev/null 2> /dev/null; then
	echo "Try: \`apt-get install ${APT_PKGS[*]}\`"
fi

if [ "$RETCODE" -eq 0 ]; then
	echo "Configuration written to makefile.local"
else
	echo "Failed"
fi

exit $RETCODE
